import { Box, DOMElement, measureElement } from 'ink'

type Scalar = string | number | boolean | null | undefined

type ScalarDict = {
  [key: string]: Scalar
}

interface TableProps<T extends ScalarDict> {
  data: T[]
}

export const Table = <T extends ScalarDict>({ data }: TableProps<T>) => {
  const headerRow = Object.entries(data[0]).map(([key]) => key)

  const rows = data.map((row) =>
    Object.entries(row).map(([key, value]) => value),
  )

  const all = [headerRow, ...rows]

  const startWidths = Array.from({
    length: Object.entries(data[0]).length,
  }).map(() => 0)

  const widths = all.reduce<number[]>((widths, row) => {
    return startWidths.map((maxWidth, i) => {
      return Math.max(maxWidth, row.length)
    })
  }, startWidths)

  const headerBoxes = (
    <Box>
      {headerRow.map((header, i) => (
        <Box key={i} width={widths[i]}>
          {header}
        </Box>
      ))}
    </Box>
  )

  const contentBoxes = rows.map((row, i) => (
    <Box>
      {row.map((cell, i) => (
        <Box key={i} width={widths[i]}>
          {cell}
        </Box>
      ))}
    </Box>
  ))
  
  return <Box>
   {headerBoxes} 
   {contentBoxes}
  </Box>
}

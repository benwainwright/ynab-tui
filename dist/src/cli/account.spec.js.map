{"version":3,"sources":["../../../src/cli/account.spec.tsx"],"sourcesContent":["import { Account } from '@components'\nimport { run } from 'cmd-ts'\nimport { account } from './account.tsx'\nimport { Instance, render } from 'ink'\nimport { mock } from 'vitest-mock-extended'\nimport { when } from 'vitest-when'\n\nvi.mock('ink')\nvi.mock('@components')\n\nafterEach(() => {\n  vi.resetAllMocks()\n})\n\ndescribe('account', () => {\n  it('renders the account component', async () => {\n    const waitUntilExit = () => Promise.resolve()\n\n    const mockInstance = mock<Instance>({ waitUntilExit })\n\n    when(vi.mocked(render))\n      .calledWith(<Account name=\"foo-bar\" />)\n      .thenReturn(mockInstance)\n\n    await run(account, ['--name', 'foo-bar'])\n\n    expect(render).toBeCalledWith(<Account name=\"foo-bar\" />)\n  })\n})\n"],"names":["Account","run","account","render","mock","when","vi","afterEach","resetAllMocks","describe","it","waitUntilExit","Promise","resolve","mockInstance","mocked","calledWith","name","thenReturn","expect","toBeCalledWith"],"mappings":";AAAA,SAASA,OAAO,QAAQ,yBAAa;AACrC,SAASC,GAAG,QAAQ,SAAQ;AAC5B,SAASC,OAAO,uBAAuB;AACvC,SAAmBC,MAAM,QAAQ,MAAK;AACtC,SAASC,IAAI,QAAQ,uBAAsB;AAC3C,SAASC,IAAI,QAAQ,cAAa;AAElCC,GAAGF,IAAI,CAAC;AACRE,GAAGF,IAAI,CAAC;AAERG,UAAU;IACRD,GAAGE,aAAa;AAClB;AAEAC,SAAS,WAAW;IAClBC,GAAG,iCAAiC;QAClC,MAAMC,gBAAgB,IAAMC,QAAQC,OAAO;QAE3C,MAAMC,eAAeV,KAAe;YAAEO;QAAc;QAEpDN,KAAKC,GAAGS,MAAM,CAACZ,SACZa,UAAU,eAAC,KAAChB;YAAQiB,MAAK;YACzBC,UAAU,CAACJ;QAEd,MAAMb,IAAIC,SAAS;YAAC;YAAU;SAAU;QAExCiB,OAAOhB,QAAQiB,cAAc,eAAC,KAACpB;YAAQiB,MAAK;;IAC9C;AACF"}
{"version":3,"sources":["../../../../src/hooks/use-api/use-api.spec.ts"],"sourcesContent":["import { useConfig } from '@hooks'\nimport { renderHook, waitFor } from '@testing-library/react'\nimport { mock } from 'vitest-mock-extended'\nimport { API } from 'ynab'\nimport { when } from 'vitest-when'\n\nbeforeEach(() => {\n  vi.resetAllMocks()\n  vi.resetModules()\n})\n\ndescribe('useApi', () => {\n  it('should return the api the first time it is called', async () => {\n\n    vi.doMock('ynab')\n    vi.doMock('@hooks')\n\n    const { useApi } = await import('./use-api.ts')\n    const { API } = await import('ynab')\n    const { useConfig } = await import('@hooks')\n\n    const mockAuthStrategy = vi.fn().mockResolvedValue('token')\n\n    vi.mocked(useConfig).mockReturnValue({\n      apiAuthStrategy: mockAuthStrategy,\n    })\n\n    const mockApi = mock<API>()\n\n    when(vi.mocked(API)).calledWith('token').thenReturn(mockApi)\n\n    const { result } = renderHook(() => useApi())\n\n    expect(result.current.api).toBeUndefined()\n\n    await waitFor(() => {\n      expect(result.current.api).toEqual(mockApi)\n    })\n  })\n\n  it('should only load the API one', async () => {\n\n    vi.doMock('ynab')\n    vi.doMock('@hooks')\n\n    const { useApi } = await import('./use-api.ts')\n    const { API } = await import('ynab')\n    const { useConfig } = await import('@hooks')\n\n    const mockAuthStrategy = vi.fn().mockResolvedValue('token')\n\n    vi.mocked(useConfig).mockReturnValue({\n      apiAuthStrategy: mockAuthStrategy,\n    })\n\n    const mockApi = mock<API>()\n\n    when(vi.mocked(API)).calledWith('token').thenReturn(mockApi)\n\n    renderHook(() => useApi())\n\n    await waitFor(() => {\n      expect(API).toHaveBeenCalledTimes(1)\n    })\n\n    const { result } = renderHook(() => useApi())\n\n    await waitFor(() => {\n      expect(result.current.api).not.toBeUndefined()\n      expect(API).toHaveBeenCalledTimes(1)\n    })\n  })\n})\n"],"names":["renderHook","waitFor","mock","when","beforeEach","vi","resetAllMocks","resetModules","describe","it","doMock","useApi","API","useConfig","mockAuthStrategy","fn","mockResolvedValue","mocked","mockReturnValue","apiAuthStrategy","mockApi","calledWith","thenReturn","result","expect","current","api","toBeUndefined","toEqual","toHaveBeenCalledTimes","not"],"mappings":"AACA,SAASA,UAAU,EAAEC,OAAO,QAAQ,yBAAwB;AAC5D,SAASC,IAAI,QAAQ,uBAAsB;AAE3C,SAASC,IAAI,QAAQ,cAAa;AAElCC,WAAW;IACTC,GAAGC,aAAa;IAChBD,GAAGE,YAAY;AACjB;AAEAC,SAAS,UAAU;IACjBC,GAAG,qDAAqD;QAEtDJ,GAAGK,MAAM,CAAC;QACVL,GAAGK,MAAM,CAAC;QAEV,MAAM,EAAEC,MAAM,EAAE,GAAG,MAAM,MAAM,CAAC;QAChC,MAAM,EAAEC,GAAG,EAAE,GAAG,MAAM,MAAM,CAAC;QAC7B,MAAM,EAAEC,SAAS,EAAE,GAAG,MAAM,MAAM,CAAC;QAEnC,MAAMC,mBAAmBT,GAAGU,EAAE,GAAGC,iBAAiB,CAAC;QAEnDX,GAAGY,MAAM,CAACJ,WAAWK,eAAe,CAAC;YACnCC,iBAAiBL;QACnB;QAEA,MAAMM,UAAUlB;QAEhBC,KAAKE,GAAGY,MAAM,CAACL,MAAMS,UAAU,CAAC,SAASC,UAAU,CAACF;QAEpD,MAAM,EAAEG,MAAM,EAAE,GAAGvB,WAAW,IAAMW;QAEpCa,OAAOD,OAAOE,OAAO,CAACC,GAAG,EAAEC,aAAa;QAExC,MAAM1B,QAAQ;YACZuB,OAAOD,OAAOE,OAAO,CAACC,GAAG,EAAEE,OAAO,CAACR;QACrC;IACF;IAEAX,GAAG,gCAAgC;QAEjCJ,GAAGK,MAAM,CAAC;QACVL,GAAGK,MAAM,CAAC;QAEV,MAAM,EAAEC,MAAM,EAAE,GAAG,MAAM,MAAM,CAAC;QAChC,MAAM,EAAEC,GAAG,EAAE,GAAG,MAAM,MAAM,CAAC;QAC7B,MAAM,EAAEC,SAAS,EAAE,GAAG,MAAM,MAAM,CAAC;QAEnC,MAAMC,mBAAmBT,GAAGU,EAAE,GAAGC,iBAAiB,CAAC;QAEnDX,GAAGY,MAAM,CAACJ,WAAWK,eAAe,CAAC;YACnCC,iBAAiBL;QACnB;QAEA,MAAMM,UAAUlB;QAEhBC,KAAKE,GAAGY,MAAM,CAACL,MAAMS,UAAU,CAAC,SAASC,UAAU,CAACF;QAEpDpB,WAAW,IAAMW;QAEjB,MAAMV,QAAQ;YACZuB,OAAOZ,KAAKiB,qBAAqB,CAAC;QACpC;QAEA,MAAM,EAAEN,MAAM,EAAE,GAAGvB,WAAW,IAAMW;QAEpC,MAAMV,QAAQ;YACZuB,OAAOD,OAAOE,OAAO,CAACC,GAAG,EAAEI,GAAG,CAACH,aAAa;YAC5CH,OAAOZ,KAAKiB,qBAAqB,CAAC;QACpC;IACF;AACF"}
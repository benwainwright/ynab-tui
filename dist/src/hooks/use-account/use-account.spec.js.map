{"version":3,"sources":["../../../../src/hooks/use-account/use-account.spec.tsx"],"sourcesContent":["import { renderHook, waitFor } from '@testing-library/react'\nimport { useAccount } from './use-account.tsx'\nimport { mock } from 'vitest-mock-extended'\nimport {\n  Account,\n  API,\n  BudgetSummary,\n  TransactionDetail,\n  TransactionsApi,\n  TransactionsResponse,\n} from 'ynab'\nimport { useApi, useBudget } from '@hooks'\nimport { when } from 'vitest-when'\n\nvi.mock('@hooks')\n\nbeforeEach(() => {\n  vi.resetAllMocks()\n})\n\ndescribe('useTransactions', () => {\n  it('should return the transactions for the given account given the account id', async () => {\n    const mockTransactionsApi = mock<TransactionsApi>()\n\n    const transactions: TransactionDetail[] = [mock(), mock()]\n\n    const transactionsResponse = mock<TransactionsResponse>({\n      data: {\n        transactions,\n      },\n    })\n\n    const account = mock<Account>({ name: 'Current', id: 'account-123' })\n\n    const budget = mock<BudgetSummary>({\n      id: 'budget-123',\n      accounts: [account],\n    })\n\n    when(mockTransactionsApi.getTransactionsByAccount)\n      .calledWith('budget-123', 'account-123')\n      .thenResolve(transactionsResponse)\n\n    const mockApi = mock<API>({\n      transactions: mockTransactionsApi,\n    })\n\n    when(useBudget).calledWith({ includeAccounts: true }).thenReturn({ budget })\n\n    vi.mocked(useApi).mockReturnValue({ api: mockApi })\n\n    const { result } = renderHook(() => useAccount({ name: 'Current' }))\n\n    expect(result.current.transactions).toBeUndefined()\n\n    await waitFor(() => {\n      expect(result.current.transactions).toEqual(transactions)\n    })\n  })\n})\n"],"names":["renderHook","waitFor","useAccount","mock","useApi","useBudget","when","vi","beforeEach","resetAllMocks","describe","it","mockTransactionsApi","transactions","transactionsResponse","data","account","name","id","budget","accounts","getTransactionsByAccount","calledWith","thenResolve","mockApi","includeAccounts","thenReturn","mocked","mockReturnValue","api","result","expect","current","toBeUndefined","toEqual"],"mappings":"AAAA,SAASA,UAAU,EAAEC,OAAO,QAAQ,yBAAwB;AAC5D,SAASC,UAAU,2BAA2B;AAC9C,SAASC,IAAI,QAAQ,uBAAsB;AAS3C,SAASC,MAAM,EAAEC,SAAS,QAAQ,cAAQ;AAC1C,SAASC,IAAI,QAAQ,cAAa;AAElCC,GAAGJ,IAAI,CAAC;AAERK,WAAW;IACTD,GAAGE,aAAa;AAClB;AAEAC,SAAS,mBAAmB;IAC1BC,GAAG,6EAA6E;QAC9E,MAAMC,sBAAsBT;QAE5B,MAAMU,eAAoC;YAACV;YAAQA;SAAO;QAE1D,MAAMW,uBAAuBX,KAA2B;YACtDY,MAAM;gBACJF;YACF;QACF;QAEA,MAAMG,UAAUb,KAAc;YAAEc,MAAM;YAAWC,IAAI;QAAc;QAEnE,MAAMC,SAAShB,KAAoB;YACjCe,IAAI;YACJE,UAAU;gBAACJ;aAAQ;QACrB;QAEAV,KAAKM,oBAAoBS,wBAAwB,EAC9CC,UAAU,CAAC,cAAc,eACzBC,WAAW,CAACT;QAEf,MAAMU,UAAUrB,KAAU;YACxBU,cAAcD;QAChB;QAEAN,KAAKD,WAAWiB,UAAU,CAAC;YAAEG,iBAAiB;QAAK,GAAGC,UAAU,CAAC;YAAEP;QAAO;QAE1EZ,GAAGoB,MAAM,CAACvB,QAAQwB,eAAe,CAAC;YAAEC,KAAKL;QAAQ;QAEjD,MAAM,EAAEM,MAAM,EAAE,GAAG9B,WAAW,IAAME,WAAW;gBAAEe,MAAM;YAAU;QAEjEc,OAAOD,OAAOE,OAAO,CAACnB,YAAY,EAAEoB,aAAa;QAEjD,MAAMhC,QAAQ;YACZ8B,OAAOD,OAAOE,OAAO,CAACnB,YAAY,EAAEqB,OAAO,CAACrB;QAC9C;IACF;AACF"}